// Generated by IcedCoffeeScript 1.4.0a
(function() {
  var GenericAddon, Modification, Ship, Title, Upgrade, exportObj,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.iced = {
    Deferrals: (function() {

      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) return this.continuation(this.ret);
      };

      _Class.prototype.defer = function(defer_params) {
        var _this = this;
        ++this.count;
        return function() {
          var inner_params, _ref;
          inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (defer_params != null) {
            if ((_ref = defer_params.assign_fn) != null) {
              _ref.apply(null, inner_params);
            }
          }
          return _this._fulfill();
        };
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  window.__iced_k = window.__iced_k_noop = function() {};

  exportObj = typeof exports !== "undefined" && exports !== null ? exports : this;

  exportObj.sortHelper = function(a, b) {
    var a_name, b_name;
    if (a.points === b.points) {
      a_name = a.text.replace(/[^a-z0-9]/ig, '');
      b_name = b.text.replace(/[^a-z0-9]/ig, '');
      if (a_name === b_name) {
        return 0;
      } else {
        if (a_name > b_name) {
          return 1;
        } else {
          return -1;
        }
      }
    } else {
      if (a.points > b.points) {
        return 1;
      } else {
        return -1;
      }
    }
  };

  $.isMobile = function() {
    return navigator.userAgent.match(/(iPhone|iPod|iPad|Android)/i);
  };

  $.getParameterByName = function(name) {
    var regex, regexS, results;
    name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
    regexS = "[\\?&]" + name + "=([^&#]*)";
    regex = new RegExp(regexS);
    results = regex.exec(window.location.search);
    if (results === null) {
      return "";
    } else {
      return decodeURIComponent(results[1].replace(/\+/g, " "));
    }
  };

  exportObj.SquadBuilder = (function() {

    function SquadBuilder(args) {
      this.releaseUnique = __bind(this.releaseUnique, this);
      this.claimUnique = __bind(this.claimUnique, this);      this.container = $(args.container);
      this.faction = $.trim(args.faction);
      this.ships = [];
      this.uniques_in_use = {
        Pilot: [],
        Upgrade: [],
        Modification: [],
        Title: []
      };
      this.setupUI();
      this.setupEventHandlers();
    }

    SquadBuilder.prototype.setupUI = function() {
      this.ship_container = $(document.createElement('DIV'));
      this.ship_container.addClass('container-fluid');
      this.container.append(this.ship_container);
      this.button_container = $(document.createElement('DIV'));
      this.button_container.addClass('container-fluid');
      this.container.append(this.button_container);
      return this.button_container.text('This would have buttons.');
    };

    SquadBuilder.prototype.setupEventHandlers = function() {
      var _this = this;
      return this.container.on('xwing:claimUnique', function(e, unique, type, cb) {
        return _this.claimUnique(unique, type, cb);
      }).on('xwing:releaseUnique', function(e, unique, type, cb) {
        return _this.releaseUnique(unique, type, cb);
      });
    };

    SquadBuilder.prototype.uniqueIndex = function(unique, type) {
      if (!(type in this.uniques_in_use)) {
        throw "Invalid unique type '" + type + "'";
      }
      return this.uniques_in_use[type].indexOf(unique);
    };

    SquadBuilder.prototype.claimUnique = function(unique, type, cb) {
      var crew, pilot;
      if (this.uniqueIndex(unique, type) < 0) {
        if (type === 'Pilot') {
          crew = exportObj.upgrades[unique.name];
          if ((crew != null) && ((crew != null ? crew.unique : void 0) != null)) {
            if (this.uniqueIndex(crew, 'Upgrade') < 0) {
              this.uniques_in_use['Upgrade'].push(crew);
            } else {
              throw "Unique " + type + " '" + unique.name + "' already claimed as crew";
            }
          }
        } else if (type === 'Upgrade' && (unique.slot = 'Crew')) {
          pilot = exportObj.pilots[unique.name];
          if ((pilot != null) && ((pilot != null ? pilot.unique : void 0) != null)) {
            if (this.uniqueIndex(pilot, 'Pilot') < 0) {
              this.uniques_in_use['Upgrade'].push(pilot);
            } else {
              throw "Unique " + type + " '" + unique.name + "' already claimed as pilot";
            }
          }
        }
        this.uniques_in_use[type].push(unique);
      } else {
        throw "Unique " + type + " '" + unique.name + "' already claimed";
      }
      return cb();
    };

    SquadBuilder.prototype.releaseUnique = function(unique, type, cb) {
      var crew, idx, pilot;
      idx = this.uniqueIndex(unique, type);
      if (idx >= 0) {
        this.uniques_in_use[type].splice(idx, 1);
        if (type === 'Pilot') {
          crew = exportObj.upgrades[unique.name];
          if ((crew != null) && ((crew != null ? crew.unique : void 0) != null)) {
            idx = this.uniqueIndex(crew, 'Upgrade');
            if (idx < 0) {
              throw "Unique crew accompanying " + unique.name + " was not also claimed!";
            }
            this.uniques_in_use['Upgrade'].splice(idx, 1);
          }
        } else if (type === 'Upgrade' && (unique.slot = 'Crew')) {
          pilot = exportObj.pilots[unique.name];
          if ((pilot != null) && ((pilot != null ? pilot.unique : void 0) != null)) {
            idx = this.uniqueIndex(pilot, 'Pilot');
            if (idx < 0) {
              throw "Unique pilot accompanying " + unique.name + " was not also claimed!";
            }
            this.uniques_in_use['Pilot'].splice(idx, 1);
          }
        }
      } else {
        throw "Unique " + type + " '" + unique.name + "' not in use";
      }
      return cb();
    };

    SquadBuilder.prototype.addShip = function() {
      return this.ships.push(new Ship({
        builder: this,
        container: this.ship_container
      }));
    };

    SquadBuilder.prototype.removeShip = function(ship) {
      var idx, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      idx = this.ships.indexOf(ship);
      if (idx < 0) throw "Ship not found";
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "main2.coffee",
          funcname: "SquadBuilder.removeShip"
        });
        ship.destroy(__iced_deferrals.defer({
          lineno: 130
        }));
        __iced_deferrals._fulfill();
      })(function() {
        console.log("Removing ship from array...");
        return _this.ships.splice(idx, 1);
      });
    };

    SquadBuilder.prototype.getAvailablePilotsIncluding = function(include_pilot, term) {
      var pilot, pilot_name, result_pilot, result_pilots_by_ship, results, ship, unclaimed_faction_pilots, _i, _j, _len, _len1, _ref, _ref1;
      if (term == null) term = '';
      unclaimed_faction_pilots = (function() {
        var _ref, _results;
        _ref = exportObj.pilots;
        _results = [];
        for (pilot_name in _ref) {
          pilot = _ref[pilot_name];
          if (exportObj.ships[pilot.ship].faction === this.faction && pilot_name.toUpperCase().indexOf(term.toUpperCase()) >= 0 && ((pilot.unique == null) || __indexOf.call(this.uniques_in_use['Pilot'], pilot) < 0)) {
            _results.push(pilot);
          }
        }
        return _results;
      }).call(this);
      if ((include_pilot != null) && (include_pilot.unique != null) && include_pilot.name.toUpperCase().indexOf(term.toUpperCase()) >= 0) {
        unclaimed_faction_pilots.push(include_pilot);
      }
      result_pilots_by_ship = {};
      _ref = (function() {
        var _j, _len, _results;
        _results = [];
        for (_j = 0, _len = unclaimed_faction_pilots.length; _j < _len; _j++) {
          pilot = unclaimed_faction_pilots[_j];
          _results.push({
            id: pilot.id,
            text: "" + pilot.name + " (" + pilot.points + ")",
            points: pilot.points,
            ship: pilot.ship
          });
        }
        return _results;
      })();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        result_pilot = _ref[_i];
        if (!(result_pilot.ship in result_pilots_by_ship)) {
          result_pilots_by_ship[result_pilot.ship] = [];
        }
        result_pilots_by_ship[result_pilot.ship].push(result_pilot);
      }
      results = [];
      _ref1 = Object.keys(result_pilots_by_ship).sort();
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        ship = _ref1[_j];
        results.push({
          text: ship,
          children: result_pilots_by_ship[ship].sort(exportObj.sortHelper)
        });
      }
      return results;
    };

    return SquadBuilder;

  })();

  Ship = (function() {

    function Ship(args) {
      this.builder = args.builder;
      this.container = args.container;
      this.pilot = null;
      this.data = null;
      this.upgrades = [];
      this.modification = null;
      this.title = null;
      this.setupUI();
    }

    Ship.prototype.destroy = function(cb) {
      console.log("Destroying ship...");
      this.resetPilot();
      this.resetAddons();
      this.teardownUI();
      console.log("Done destroying ship");
      return cb();
    };

    Ship.prototype.setPilotById = function(id) {
      return this.setPilot(exportObj.pilotsById[parseInt(id)]);
    };

    Ship.prototype.setPilotByName = function(name) {
      return this.setPilot(exportObj.pilots[$.trim(name)]);
    };

    Ship.prototype.setPilot = function(new_pilot) {
      var ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (new_pilot !== this.pilot) {
        this.resetPilot();
        this.resetAddons();
      }
      this.pilot = new_pilot;
      this.data = exportObj.ships[(_ref = this.pilot) != null ? _ref.ship : void 0];
      (function(__iced_k) {
        var _ref1;
        if (((_ref1 = _this.pilot) != null ? _ref1.unique : void 0) != null) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "main2.coffee",
              funcname: "Ship.setPilot"
            });
            _this.builder.container.trigger('xwing:claimUnique', [
              _this.pilot, 'Pilot', __iced_deferrals.defer({
                lineno: 188
              })
            ]);
            __iced_deferrals._fulfill();
          })(__iced_k);
        } else {
          return __iced_k();
        }
      })(function() {
        return _this.pilot;
      });
    };

    Ship.prototype.resetPilot = function() {
      var ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      console.log("Resetting pilot...");
      (function(__iced_k) {
        var _ref;
        if (((_ref = _this.pilot) != null ? _ref.unique : void 0) != null) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "main2.coffee",
              funcname: "Ship.resetPilot"
            });
            _this.builder.container.trigger('xwing:releaseUnique', [
              _this.pilot, 'Pilot', __iced_deferrals.defer({
                lineno: 194
              })
            ]);
            __iced_deferrals._fulfill();
          })(__iced_k);
        } else {
          return __iced_k();
        }
      })(function() {
        return _this.pilot = null;
      });
    };

    Ship.prototype.resetAddons = function() {
      var idx, upgrade, ___iced_passed_deferral, __iced_deferrals, __iced_k, _i, _len, _ref;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      console.log("Resetting addons...");
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "main2.coffee",
        funcname: "Ship.resetAddons"
      });
      _ref = this.upgrades;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        upgrade = _ref[_i];
        upgrade.destroy(__iced_deferrals.defer({
          lineno: 201
        }));
        idx = this.upgrades.indexOf(upgrade);
        this.upgrades.splice(idx, 1);
      }
      if (this.modification != null) {
        this.modification.destroy(__iced_deferrals.defer({
          lineno: 204
        }));
      }
      this.modification = null;
      if (this.title != null) {
        this.title.destroy(__iced_deferrals.defer({
          lineno: 206
        }));
      }
      this.title = null;
      __iced_deferrals._fulfill();
    };

    Ship.prototype.setupUI = function() {
      var _this = this;
      this.row = $(document.createElement('DIV'));
      this.row.addClass('row');
      this.container.append(this.row);
      this.row.append($.trim('<div class="span4 pilot-selector-container">\n    <input type="hidden" />\n</div>\n<div class="span1 points-display-container" />\n<div class="span6 addon-container" />\n<div class="span1 remove-btn-container" />'));
      this.pilot_selector = $(this.row.find('div.pilot-selector-container input[type=hidden]'));
      this.pilot_selector.select2({
        width: '100%',
        placeholder: 'Select a pilot',
        query: function(query) {
          return query.callback({
            more: false,
            results: _this.builder.getAvailablePilotsIncluding(_this.pilot, query.term)
          });
        }
      });
      return this.pilot_selector.on('change', function(e) {
        return _this.setPilotById(_this.pilot_selector.select2('val'));
      });
    };

    Ship.prototype.teardownUI = function() {
      return this.row.remove();
    };

    return Ship;

  })();

  GenericAddon = (function() {

    function GenericAddon(args) {
      this.type = null;
      this.ship = args.ship;
      this.container = $(args.container);
      this.data = null;
    }

    GenericAddon.prototype.destroy = function() {
      var args, cb, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      cb = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      (function(__iced_k) {
        var _ref;
        if (((_ref = _this.data) != null ? _ref.unique : void 0) != null) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "main2.coffee",
              funcname: "GenericAddon.destroy"
            });
            _this.ship.builder.container.trigger('xwing:releaseUnique', [
              _this.data, _this.type, __iced_deferrals.defer({
                lineno: 248
              })
            ]);
            __iced_deferrals._fulfill();
          })(__iced_k);
        } else {
          return __iced_k();
        }
      })(function() {
        _this.container.remove();
        return cb(args);
      });
    };

    return GenericAddon;

  })();

  Upgrade = (function(_super) {

    __extends(Upgrade, _super);

    function Upgrade(args) {
      Upgrade.__super__.constructor.call(this, args);
      this.slot = args.slot;
      this.type = 'Upgrade';
    }

    return Upgrade;

  })(GenericAddon);

  Modification = (function(_super) {

    __extends(Modification, _super);

    function Modification(args) {
      Modification.__super__.constructor.call(this, args);
      this.type = 'Modification';
    }

    return Modification;

  })(GenericAddon);

  Title = (function(_super) {

    __extends(Title, _super);

    function Title(args) {
      Title.__super__.constructor.call(this, args);
      this.type = 'Title';
    }

    return Title;

  })(GenericAddon);

}).call(this);
